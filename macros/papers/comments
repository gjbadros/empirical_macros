Legend:

o = unconsidered
@ = we have a plan, but haven't yet implemented that change
  = done
^ = problem addressed differently
x = not done (rejected the suggestion)



o The one big comment: it's too easy to lose track where one is in the paper.
o I don't know how to solve this.

o 1) Mike, you should add an acknowledgment of your IBM fellowship.

o 2) Introduction:

o      a) "understanding and transforming" should perhaps read "understanding
o      and modifying".  I didn't mark it everywhere, but this version still
o      feels a bit too heavily weighted towards supporting transformation of
o      C programs (to C++), and I don't think that works so well.

o      b) "but lends itself to arbitrary" => "allowing"

o      c) The period at the end of the p. 424 Stroustrup quotation should, I
o      think go after the "]".

o      d) I think we can live without any citations to approximate tools, but
o      it wouldn't hurt either.

o      e) "approximate tools (such ... techniques)." => "tools that produce
o      approximate information, such as those based on lexical or on
o      approximate parsing techniques."

o      f) The segue from the last bullet ("The final option") to the next
o      paragraph is weak.  I know, I put it there myself.  I'll suggest
o      something like the following:

o           "Choices among these options are made in the absence of
o           an understanding of how Cpp is used in practice.  That is,
o           much has been written about Cpp's potential pitfalls, but no
o           previous work has examined..."

o      g) "that might, if present in practice, compilcate" => that complicate"

o      h) After "software engineers and tool builders" I might add the following
o      text:

o           "Each of these pitfalls arises to some degree in practice.  What
o           our analysis determines is the extent to which it occurs.  For
o           pitfalls that arise infrequently in practice, different
o           approaches to tool building and other activities might be
o           feasible."

o           [OK, the writing sucks.  But something like this might help,
o           perhaps after the bullets.]

o      i) Make sure that Cpp is consistently capitalized throughout.

o      j) I happen to hate the formatting of {description}, but that's life.

o      k) I would try to make every item in the pitfalls list include the
o      word "problematic" (or a synonym), to give the sense about what the
o      specific pitfall is.  As an example, why complicated bodies are a
o      potential pitfall isn't stated.

o 3) Metholodogy

o      a) Do either of you know the difference between "that" and "which"?
o      (Restrictive vs. unrestrictive, I believe, is the term.)  If so, fix
o      them in the paper.  Otherwise, don't waste the time now.  (A quick
o      look at the on-line Strunk & White can give a quick rundown on this.)

o      b) "while others are not, and some are graphical while" => "while
o      others are not; some are graphical, while"

o      c) "thoroughgoing" => "thorough"

o      d) This [[comment]] on merging Cpp branches should come out,
o      I think, without replacement by real text.

o      e) I'm not sure that the paragraph, "We perform approximate
o      parsing..."  belongs where it is.  I slightly prefer appending it to
o      the end of the following paragraph (which introduces the tools
o      themselves), although I don't really like ending the section that way.
o      OK, so instead insert this paragraph between the two sentences in the
o      last paragraph.  I think that works.

o      f) "because the input is not a valid C program".  Well, this maybe
o      should be "because the input may not be a valid C program".

o      g) "Perk" => "Perl"

o 4) Occurrence of preprocessor directives

o      a) MAJOR POINT: As I said in earlier email to Mike, I think the
o      biggest problem with the paper is that it's unbelievably easy to get
o      lost in the middle of the data and analysis.  We either need stronger
o      intros and conclusions, or we need some kind of trick to keep people
o      aware of where they are.  (I found this worst in Section 4, I think,
o      which is very long.)  If this were a talk, the kind of icons to track
o      progress would work; but I don't have a great idea here.

o      b) "non-comment, non-blank (NCNB)" => "NCNB", since it was already
o      defined and introduced.

o      c) "One in ten" => "Nearly one in ten"

o      d) "percentage of #define" => "percentage of #defines" (with proper
o      typefaces.

o      e) FOR ALL THE FIGURES, make sure that there is only one caption,
o      not one from Excel and one from Latex.

o      f) Even for Figure 2's caption, I'd add a "fer instance":  "For
o      example, x.y% of gzip's NCNB lines are #includes, and 4.4% of all
o      lines across the packages are conditional complation directives."

o      g) "are easiest to understand and to translate into the programming
o      language" ...  This is an example of a sentence that needs to be
o      rewritten.  I'd say something like:

o           "are easiest to analyze, understand, and perhaps even
o           translate into other language constructs; so there is reason
o           to believe that the 70% of macros whose bodies are
o           expressions and the 6% that are statements can be handled
o           relatively easily by people and tools."

o      Similarly, the last sentence in the "Type" item focuses too much
o      on translation and can be similarly rewritten, I believe.

o      h) I found that the Cpp directives in-line worked pretty well most of
o      the time.  But I found that sometimes, like in "Statement", it didn't
o      work well, especially with the use of the quotation marks.  I think
o      in these cases (and perhaps always, although it will length the
o      paper a tad), the longer directives should be opened up.  For
o      example (**'s are bullets),

o           "The macro body is a complete statement such as one
o           of the following:

o                ** plu = ".";
o                ** if (x) {free(x); x=NULL;}
o                ** { int...}

o           Such a macro..."

o      i) Omit any text w.r.t. "[[Not all such are...]]", since it's covered
o      later.

o      j) Make sure all the package names are visible on the vertical
o      axis for Figure 3.

o      k) I was surprised to read (I had probably just forgotten) that
o      the parser "does not handle uses of pasting".  All uses?  Also,
o      this reminds me that it's probably worthwhile defining what
o      stringization and pasting are, perhaps in a footnote.

o      l) "were examined" =< "were examined)"

o      m) "elimination of the preprocessor" => "reducing the use of
o      the preprocessor"

o      n) In the example in Stringization (right before 4.3), definitely
o      put the example on a line of its own, since this parenthetical
o      ("(the comman is part of the macro body)" really sucks).

o      o) The transition to 4.3 (macro lint) is a specific place I got
o      a bit lost.  It's not that the intro to 4.3 isn't clear.  It's a bit
o      more of a question, why is this in Section 4.  Yes, even that's clear
o      when you think about it, but somehow I started getting lost here.
o      Maybe it's OK, but I'm a bit concerned (and don't know exactly
o      what to do).  I scrawled in a corner near the end of 4.3, "Does
o      4.3 belong here?"  I think the reason is the "macro lint" is a
o      bit disruptive; it sounds like a tool is the focus, rather than the
o      analysis per se.

o      p) "We were surprised that more macros did not take simple..."
o      This whole sentence can go, since it's handled (better) a bit
o      later on.

o      q) Check the formatting in the use of TAINT_ENV in "swallows
o      else"

o      r) I think at the end of 4.3 (macro lint) we need a pointer to
o      related work (lclint, etc.).

o      s) "under all possible circumstances" => "under all possible
o      configurations", perhaps?

o      t) "less than 2" => "less than two"

o      u) "redefined In" => "redefined.  In"

o      v) "definitions in in" => "definitions in"

o      w) "intervening #undef", make sure it's formatting properly.

o Figure 6:

o      a) Move the "(#define directives)" to the first phrase, after "Number
o      of definitions".

o Section 4:

o      a) In my version there is a problem (I'd guess a % not a \%) right
o      after the phrase "defined more than 20 times, and"

o      b) In the subsection on "Inconsistent definitions", I wonder if
o      the rules for merging should really go here.  I understand why
o      they are here, but they break the flow a bit.  It's probably right
o      to leave them there, but a long footnote and a short appendix
o      are alternatives.

o      c) In the third bullet in category merging, the parenthetical has
o      to be rephrased.  Saying "this is the wrong way" isn't a smart
o      idea in a paper.  I can imagine a rephrased footnote as more
o      appropriate, too; it's even reasonably (perhaps best) simply
o      to omit the parenthetical.

o      d) I slightly agree with Greg about dropping Figure 7.   I don't
o      feel strongly here.

o      e) "plus some complete sentences" => "plus some complete
o      statements".

o      f) In caption of Figure 8: "classified as `failure'" => "classified
o      as `failure' due to appearance in conflicting categories"

o Section 5:

o      a) In the second sentence it says "one of three things".  A few
o      sentences down is says "in both ways".  I found this a little
o      confusing.

o      b) "Overall, half" => "Overall, about half"

o      c) "Interestingly, the four packages" => "Interestingly, but
o      perhaps coincidentally, the four packages"

o      d) I wonder about moving the reference to Figure 12
o      to earlier in 5.2 (macro usage in conditional compilation).
o      It's clearly backwards to do this, since the figure mentions
o      the categories listed at the beginning of 5.2.  But I think
o      the figure is what we want people to look at, and with
o      a quick phrase as a forward reference to the categories,
o      this might work better.

o      e) Section 5.4 (number of arguments) should either go or
o      use a brief chart to capture the key ideas.  Or the basics
o      can be present in running text with a few key pieces of
o      data.  I think that leaving it in makes sense (without the
o      figure).

o Section 6:

o      a) Definitely choose and consistently use a terminology.
o      It matters far less which terminology you choose.

o      b) As for the algorithm description, it's barely adequate.
o      I slightly lean towards a pseudo-code figure of the
o      algorithm, although it doesn't fully deserve that either.

o      c) I assume 6.2.1 and 6.2.2 have been rewritten, so I'm
o      not providing comments.  I'm happy to take another pass
o      at these (or all of Section 6).

o Section 7 (Related Work):

o      a) Fix nits in the initial "Carroll and Ellis" statement.

o      b) "our analysis tool identifies" => "our analysis tool
o      identifies.  However, it appears that GNU's hints are
o      based on experience; we provide additional empirical
o      data that might help refine a set of hints."

o      c) The "lint" paragraph is too informal.  And it is followed
o      by a paragraph that thinks lint hasn't just been mentioned.

o      d) Don't nitpick the LCLint stuff.  Simple observe that their
o      decisions and our decisions (about macro lint) differ; if
o      we really produced a macro lint tool, users would get
o      different answers.  Then you can mention a single specific,
o      but no more.

o Section 8 (Conclusions):

o      a) I wouldn't recap too much: at most a bullet or two per
o      data section.  And it needn't be equitable: that is, it is
o      reasonable to omit bullets from some sections and include
o      an extra or two from others.  Only "sound bites" should go
o      here.

o      b) There's a lot of informality left in the conclusions.  If
o      it hasn't been revised, let me know and I'll send comments.
o      If it has, send it to me and I'll comment on that.
