X-From-Line: notkin@whistler  Sun May 11 18:38:09 1997
Received: from whistler.cs.washington.edu (whistler.cs.washington.edu [128.95.2.51]) by june.cs.washington.edu (8.8.5+CS/7.2ju) with ESMTP id SAA29881; Sun, 11 May 1997 18:38:09 -0700
Received: (notkin@localhost) by whistler.cs.washington.edu (8.8.5+CS/7.2ws+) id SAA04478; Sun, 11 May 1997 18:38:08 -0700
Date: Sun, 11 May 1997 18:38:08 -0700
From: notkin@whistler (David Notkin)
Message-Id: <199705120138.SAA04478@whistler.cs.washington.edu>
To: gjb@whistler, mernst@whistler
cc: notkin@whistler
Subject: comments on mike's note
Lines: 57
Xref: tolt.cs.washington.edu inbox:541
X-Gnus-Article-Number: 541   Mon May 12 08:49:10 1997

>There are two ways for a line to directly depend on a macro:
> * those that control whether this line is included
> * those that are control expansion (to first order, are expanded on this line)
>
>For a macro definition, similar to above (inclusion vs. expansion).  For a
>macro proper, can convert inclusion dependences into three types:
> * must inclusion dependences, common prefix for all inclusion dependences
>    (eg, "defined_dependenton"), eg foo if two defs
>    depend on (foo and bar) and (foo and baz), respectively.
>    All direct line inclusion dependences are must dependences.
> * expansion dependences, exhaustive suffixes for all inclusion dependences
>    -- that is, when the macro is defined on both branches (eg,
>    #if foo define bar 1 #else define bar 2 #endif).  These control
>    expansion, slightly differently than macros which are themselves expanded.
> * may inclusion dependences: everything else, eg bar and baz if two defs
>    depend on (foo and bar) and (foo and baz), respectively.  These need to
>    be sets of arbitrary conditions rather than stacks of arbitrary
>    conditions (as for must inclusion dependences).
>Can we split expansion dependences similarly?  I doubt it.
>
>Transitive closure (ie, indirect dependences):  Given line L,
>let I control L's must inclusion, E control expansion, Y control may inclusion.
>Now, if something controls I, E, or Y, what is its control of L?
> * must inclusion of I's definition => must inclusion of L
> * expansion of I's definition => must inclusion
> * may inclusion of I's definition => may inclusion
> * must inclusion of E's definition => must inclusion
>	That condition must be implied by I.
>	(There is an issue of logical implication vs. actual control: that
>	doesn't control this line, but might be implied by something that does.
>	That's fine, I think: just define must inclusion as what must be true.)
>     expansion, because it controls that definition -- not very convincing
> * expansion of E's definition: expansion
> * may inclusion of E's definition: may inclusion
> * must inclusion of Y's definition => may inclusion
> * expansion of Y's definition => may inclusion
> * may inclusion of Y's definition => may inclusion
>
>One could imagine having must and may expansion dependences, too (what is
>expanded for every definition, what for just some); but don't bother with
>that.  (Maybe I shouldn't bother with must and may inclusion dependences...)

Well, let me see.  Looks a lot like computing control dependences.  
(In fact, the may/must dependences look a bit like Podgurski and
Clarke's distinctions of weak and strong dependences.)

My temptation at first would be to take the most conservative
inclusion definition.  That it, report more false positives for
inclusion than false negatives; if you consider may inclusions as
basic and transitively close over them, I think you get this.

If this happens to be easier to compute, too, then it's an OK place
to start, I'd say.

David
 


