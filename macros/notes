Greg:
 Write mdie, like die, but also gives file&line number in file being
	parsed, and change appropriate calls.
??? THIS APPEARS TO BE DONE cppcmdcount is updated
 cppcmdcount is not getting set any longer
 count calls to macros (macro usage)
 getline():
   new global variable $current_lineno or some such, like $.
   for each PHYSICAL line, accumulate into counts of: 
	blank lines, comment lines, and code lines.  (Sum will
	be more than total, since lines can contain both comments and code,
	or both comments and preprocessor directives.)
 % #def/cpp-directives for .c files and .h files separately.
 # of preprocessor directives
   preprocessor directives as % of lines
        (logical and physical) (all and noncomment-nonblank)
 arrange to process #include files as well as those specified on the
    command line.  (The %files hash exists for this purpose.)  Deal with
    #include <> as well as #include "".  Make the value of
    $files{$filename} indicate whether this file occurred in the command
    line or not, and if not whether it was a "" or a <> included file.  If
    you wanted to build a dag of #include links while you were at it, that
    would be nice (we'll need to eventually), but it isn't essential yet.
 Look for __XXX__ (eg, built-in macro __LINE__) in the files.  In general,
	we can't know all the things that are macros, but can try; look at
	Makefiles and such.

Small code stuff:
 * when body = expression + semicolon, warn; but check that every use of
	the macro is followed by a semicolon, and if so, eliminate the one
	in the body
 * Maybe look at whole functions at a time rather than being line-oriented,
   or break on semicolons or braces instead of newlines.  But sometimes
   when we're confused, restarting at the next newline is the right thing to do.


Small projects:
 * Warn about "#define foo(bar)".  Legal, but probably a mistake.
 * Recognize macros that build assembly code, and treat/report specially?
	(What % of interesting macros are such?)
 * Warn if missing parens around arg in body, or missing parens around
	whole body.
 * Keep track of the current conditional compilation constraints
 * Warn about multi-line comments/strings in macro definitions.  (Plus
	option to turn this off.)
	Presently getline() removes the newlines silently; it shouldn't warn
	since it is called for every line, not just those in macro defs.
 * Try other (non-gcc) preprocessors on the problematic stuff, to see if they
	deal with it identically.
 * Get more packages (eg GNAT), until nishin:/tmp is full.  Then stop.
	Ask support about /tmp policy.
 * Add additional pass for function and global types before inferring macro
	invocation types.  Does a tool already exist to compute this for us?

Major projects:
 * [GREG] get better representation for types, make that work
	Deal with types of wide character and string constants.
	Need something that will parse a declarator into a type and identifier.
	Need a special typeZERO
	Perhaps separate usual_binary_conversions from a type_lub which is
		used for coalescing multiple definitions/uses.
