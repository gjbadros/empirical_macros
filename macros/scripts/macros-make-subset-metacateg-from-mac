#!/uns/bin/perl -anw
BEGIN {
  my $getopts_option_letters = 'hamd:';

  use Getopt::Std;
  use em_constants;
  use English;

  getopts($getopts_option_letters);

  sub usage () {
    die "@_\nUsage: $0 [-$getopts_option_letters]
-h usage message
-d <num> set the minimum number of defs before outputting a row for that name
-a print all lines, even ones which do not have the minimum number of defs
-m Only print data for macros w/ multiple definitions (>1)
";
  }

  usage() if ($opt_h);

  use vars qw($opt_d $opt_a $opt_h $opt_m %categoryname $cCategoryNames);

  my $i = -1;
# we need to use $i+0, or else the value pointed to
# by the first handful keeps getting incremented, and
# we get uncategorized => 21, or whatever
# The postincrement returns a temporary which gets
# stored as the value in the hash

# FIX: this table must be kept in sync with the table
# headings in latexify-meta-mark-table
  %categoryname = ("NoDefinitions" => $i++ );

  # The order here is the left->right order in the table
  make_mapping_for($i++,@mcat_NULL);
  make_mapping_for($i++,@mcat_CONSTANT);
  make_mapping_for($i++,@mcat_NONCONSTANT_EXPRESSION);
  make_mapping_for($i++,@mcat_STATEMENT);
  make_mapping_for($i++,@mcat_TYPE);
  make_mapping_for($i++,@mcat_SYNTAX);
  make_mapping_for($i++,@mcat_SYMBOL);
  make_mapping_for($i++,@mcat_SYMBOL_UNKNOWN);
  make_mapping_for($i++,@mcat_NON_C_CODE);
  make_mapping_for($i++,@mcat_FAILURE);
  $cCategoryNames = $i;

  sub make_mapping_for {
    my ($j,@vars) = @_;
    foreach my $varname (@vars) {
      my $catname = $categoryname[$$varname];
      $categoryname{$catname} = $j;
#DBG      print STDERR "Setting $catname to $j\n";
    }
  }

  foreach my $i (0..$#categoryname) {
    $CatNumber{$categoryname[$i]} = $i;
#DBG    print STDERR "$categoryname[$i] -> $i\n";
  }
}


my $cdefs_min_filter = $opt_d || 0;   # only output stats with more than this many defintions
sub marks_for_categories {
  $listref = $_[0];
  my $c;
  my $str = " " x ($cCategoryNames + 2);
  if (scalar(@$listref) > $cdefs_min_filter) {
    foreach $c (@$listref) {
      my $offset = $categoryname{$c};
      if (!defined($offset)) {
	die "Couldn't map category \"$c\" to a meta category!";
      }
      if ($offset >= 0 ) {
	substr($str,$offset,1) = "*";
      }
    }
    my $lubcat = lub_category_array(@$listref);
    if ($lubcat == $catFAILURE || $lubcat == $catMULTIPLE) {
      substr($str,$cCategoryNames+1,1) = "<";
    }
  }
  return $str;
}


sub lub_category_array( @ ) {
  my (@cats) = @_;
  my $result = $catNO_DEF;
  foreach my $categ (@cats) {
    my $numeric_categ = $CatNumber{$categ};
#DBG    print STDERR "$categoryname[$result] + $categ ($categoryname[$numeric_categ]) -> ";
    $result = category_lub( $result, $numeric_categ );
#DBG    print STDERR "$result = $categoryname[$result]\n";
  }
#DBG  print STDERR "@cats", " -> $categoryname[$result]", (($result == $catMULTIPLE || $result == $catFAILURE)?"%%%%":""),"\n";
  return $result;
}


next if /^[\#%]/;
next unless $F[10] =~ /FromStdin/;
next if !defined($F[9]) || $F[9] eq "NoDefinitions";
next if ($opt_m && $F[1] <= 1); # skip those w/o multiple definitions
 # the categories are not listed for cond comp directive only macros
#i.e. macros that are used in ccd-s, but not #define-d anywhere
my @cat = split(/,/,$F[9]);
my $row = marks_for_categories(\@cat);
if ($opt_a || $row =~ m/\*/) {
  print $row , "^", "@cat";
}
print "\n";
