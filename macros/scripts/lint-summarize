#!/uns/bin/perl -wn
# lint-summarize

# Invoke like: lint-summarize *.lint

use em_util;
use em_constants;

if (/^Excluding libraries, (\d+) macros defined (\d+) times in (\d+) packages$/)
  { die "found \"in packages\": $_"; }
elsif (/^Excluding libraries, (\d+) macros defined (\d+) times$/)
  { $macros += $1;
    $defs += $2;
    $packages++; }
elsif (/^Excluding libraries/)
  { die "Couldn't match 'Excluding libraries' line: $_"; }
elsif (/^([0-9]+)\s+\([0-9]+\.[0-9]+%\) any warning by name$/)
  { $names_any_warning += $1;
    $names_any_warning_files++; }
elsif (/^([0-9]+)\s+\([0-9]+\.[0-9]+%\) any warning by def$/)
  { $defs_any_warning += $1;
    $defs_any_warning_files++; }
# No trailing $ here, because the message tells what the arities are
elsif (/^([0-9]+)\s+\([0-9]+\.[0-9]+%\) inconsistent arity by name$/)
  { $different_arity += $1;
    $different_arity_files++; }
elsif (/^([0-9]+)\s+\([0-9]+\.[0-9]+%\) null body with args$/)
  { $null_body += $1;
    $null_body_files++; }
elsif (/^([0-9]+)\s+\([0-9]+\.[0-9]+%\) contains newline$/)
  { $newline_body += $1;
    $newline_body_files++; }
elsif (/^([0-9]+)\s+\([0-9]+\.[0-9]+%\) unparenthesized body$/)
  { $unparen_body += $1;
    $unparen_body_files++; }
elsif (/^([0-9]+)\s+\([0-9]+\.[0-9]+%\) dangling semicolon$/)
  { $swallow_semi += $1;
    $swallow_semi_files++; }
elsif (/^([0-9]+)\s+\([0-9]+\.[0-9]+%\) swallows else$/)
  { $swallow_else += $1;
    $swallow_else_files++; }
elsif (/^([0-9]+)\s+\([0-9]+\.[0-9]+%\) free variables$/)
  { $free_var += $1;
    $free_var_files++; }
elsif (/^([0-9]+)\s+\([0-9]+\.[0-9]+%\) bad formal name$/)
  { $formal_name += $1;
    $formal_name_files++; }
elsif (/^([0-9]+)\s+\([0-9]+\.[0-9]+%\) multiple formal uses$/)
  { $formal_mult_use += $1;
    $formal_mult_use_files++; }
elsif (/^([0-9]+)\s+\([0-9]+\.[0-9]+%\) adjacent formal uses$/)
  { $formal_adjacent_use += $1;
    $formal_adjacent_use_files++; }
elsif (/^([0-9]+)\s+\([0-9]+\.[0-9]+%\) unparenthesized formal uses$/)
  { $formal_unparen_use += $1;
    $formal_unparen_use_files++; }
elsif (/^([0-9]+)\s+\([0-9]+\.[0-9]+%\) side-effected formal$/)
  { $formal_modified += $1;
    $formal_modified_files++; }

END
{
  if (!defined($packages))
    { die "Undefined packages"; }
  if (!defined($names_any_warning_files))
    { die "Undefined names_any_warning_files"; }
  if (!defined($defs_any_warning_files))
    { die "Undefined defs_any_warning_files"; }
  if (!defined($different_arity_files))
    { die "Undefined different_arity_files"; }
  if (!defined($null_body_files))
    { die "Undefined null_body_files"; }
  if (!defined($newline_body_files))
    { die "Undefined newline_body_files"; }
  if (!defined($unparen_body_files))
    { die "Undefined unparen_body_files"; }
  if (!defined($swallow_semi_files))
    { die "Undefined swallow_semi_files"; }
  if (!defined($swallow_else_files))
    { die "Undefined swallow_else_files"; }
  if (!defined($free_var_files))
    { die "Undefined free_var_files"; }
  if (!defined($formal_name_files))
    { die "Undefined formal_name_files"; }
  if (!defined($formal_mult_use_files))
    { die "Undefined formal_mult_use_files"; }
  if (!defined($formal_adjacent_use_files))
    { die "Undefined formal_adjacent_use_files"; }
  if (!defined($formal_unparen_use_files))
    { die "Undefined formal_unparen_use_files"; }
  if (!defined($formal_modified_files))
    { die "Undefined formal_modified_files"; }

  if (($packages != $names_any_warning_files)
      || ($packages != $defs_any_warning_files)
      || ($packages != $different_arity_files)
      || ($packages != $null_body_files)
      || ($packages != $newline_body_files)
      || ($packages != $unparen_body_files)
      || ($packages != $swallow_semi_files)
      || ($packages != $swallow_else_files)
      || ($packages != $free_var_files)
      || ($packages != $formal_name_files)
      || ($packages != $formal_mult_use_files)
      || ($packages != $formal_adjacent_use_files)
      || ($packages != $formal_unparen_use_files)
      || ($packages != $formal_modified_files))
    { die "Inconsistent number of files with info: '$packages' '$names_any_warning_files' '$defs_any_warning_files' '$different_arity_files' '$null_body_files' '$newline_body_files' '$unparen_body_files' '$swallow_semi_files' '$swallow_else_files' '$free_var_files' '$formal_name_files' '$formal_mult_use_files' '$formal_adjacent_use_files' '$formal_unparen_use_files' '$formal_modified_files'"; }

  print_lint_summary($different_arity, $null_body, $newline_body,
		     $unparen_body, $swallow_semi, $swallow_else, $free_var, $formal_name,
		     $formal_mult_use, $formal_adjacent_use,
		     $formal_unparen_use, $formal_modified,
		     $macros, $defs, $names_any_warning, $defs_any_warning,
		     $packages);
}
