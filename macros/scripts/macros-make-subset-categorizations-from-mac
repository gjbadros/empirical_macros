#!/uns/bin/perl -anw
BEGIN {
  my $getopts_option_letters = 'had:';

  use Getopt::Std;
  getopts($getopts_option_letters);

  sub usage () {
    die "@_\nUsage: $0 [-$getopts_option_letters]
-h usage message
-d <num> set the minimum number of defs before outputting a row for that name
-a print all lines, even ones which do not have the minimum number of defs
";
  }

  usage() if ($opt_h);

  use vars qw($opt_d $opt_a $opt_h);

  my $i = 0;
# we need to use $i+0, or else the value pointed to
# by the first handful keeps getting incremented, and
# we get uncategorized => 21, or whatever
# The postincrement returns a temporary which gets
# stored as the value in the hash

# FIX: this hash must be kept in sync with the table
# headings in latexify-mark-table
  %categoryname = (
		      'uncategorized' =>$i+0,
		      'being_categorized' =>$i+0,
		      'multiply_categorized' =>$i+0,
		      'failed_categorization' => $i++,

		      'null_define' =>$i++,

		      'literal' =>$i++,
		      'constant' =>$i++,
		      'some_constant' =>$i++,

		      'expression' =>$i++,
		      'expression_with_assignment' =>$i++,
		      'expression_with_free_variables' =>$i++,
		      'macro_as_function' => $i++,

		      'assembly_code' => $i++,
		      'statement' => $i++,

		      'token_pasting' => $i++,
		      'stringization' => $i++,

		      'expands_to_reserved_word' => $i++,
		      'mismatched_entities' => $i++,
		      'syntax_tokens' => $i++,

		      'expands_to_type' => $i++,
		      'has_type_argument' => $i++,
		      'macro_as_type' => $i++,
		      'uses_type_argument' => $i++,

		      'LAST' =>$i++
		     );
  my $lastargv = "";
}

my $cdefs_min_filter = $opt_d || 0;   # only output stats with more than this many defintions
sub marks_for_categories {
  $listref = $_[0];
  my $c;
  my $str = " " x ($categoryname{"LAST"});
  if (scalar(@$listref) > $cdefs_min_filter) {
    foreach $c (@$listref) {
      my $offset = $categoryname{$c};
      if (!defined($offset)) {
	die $c;
      }
      substr($str,$offset,1) = "*";
    }
  }
  return $str;
}

# Display the file we're working on
#if (!defined($ARGV) || !defined($lastargv) || $ARGV ne $lastargv) {
#  print STDERR $ARGV, "\n";
#  $lastargv = $ARGV;
#}

use English;
next if /^[\#%]/;
next if /FromInclude<>/;
next if !defined($F[8]); # the categories are not listed for cond comp directive only macros
#i.e. macros that are used in ccd-s, but not #define-d anywhere
my @cat = split(/,/,$F[8]);

my $row = marks_for_categories(\@cat);
if ($opt_a || $row =~ m/\*/) {
  print $row;
}
print "\n";
