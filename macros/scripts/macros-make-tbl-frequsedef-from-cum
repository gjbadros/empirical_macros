#!/uns/bin/perl -w
#$Id$
# Typical usage:  macros-make-tbl-frequsedef-from-cum *.frequse_cum
# or from the Makefile.
use English;
use File::Basename;
use Carp;
$fDebug = 0;
$opt_p = 1;

my $script_name = basename($0);

if ($#ARGV == -1) {
  usage();
}

@files = @ARGV;
if ($files[0] =~ /\.frequse_cum$/) {
  @buckets = (0,1,2,3,4,5,6,8,10,20,40,80,160,320);  # extend this here to see tails
  $label = "No. uses";
} elsif ($files[0] =~ /\.freqdef_cum$/) {
  @buckets = (1..20);
  $label = "No. defs";
} elsif ($files[0] =~ /\.freqddf_cum$/) {
  @buckets = (1..20);
  $label = "No. distinct defs";
} else {
  usage();
}

sub usage {
  print STDERR "Usage: $script_name <*.freq{use,def,ddf}_cum files>\n";
  exit -1;
}

$OFS = "\t";
my $grand_total = 0;

my $file;
foreach $file (@files) {
  $pkg = $file;
  $pkg =~ s/\..*$//;

  print STDERR "Reading $file...\n" if $fDebug;
  open(IN,"<$file") or die "Can't open $file: $!";
  $_ = <IN>;
  chop;
  $total{$pkg} = (split())[1];
  if (!defined($total{$pkg})) {
    $total{$pkg} = 0;
  }
  $grand_total += $total{$pkg};
  print STDERR "pkg_total = $total{$pkg}", "\n" if $fDebug;

  my $i = 0;
  my $fDone = 0;
#  print STDERR $file, "\n";
  foreach $line (@buckets) {
    my $n = $total{$pkg};
    while (<IN>) {
      last if $fDone;
      if (/^\#?Category:/ || /^\s*$/) {
	$fDone = 1;
	last;
      }
      if (defined($_)) {
	chop;
	($bucket,$n) = split;
	last if $bucket == $line;
      }
    }
    if (!defined($column{"<total>"}[$i])) {
      $column{"<total>"}[$i] = 0;
    }
    $column{"<total>"}[$i] += $n;
    push @{$column{$pkg}},$n;
    $i++;
  }
  close(IN);
}

$total{"<total>"} = $grand_total;

print "$label" . $OFS;

foreach $pkg (sort keys %column) {
  # Possbly remove "cat-" prefixes
  ($pkg_display_name = $pkg) =~ s/^cat-//;
  print "$pkg_display_name" . $OFS;
}
print "\n";
my $iRow;
for ($iRow = 0; $iRow <= $#buckets; $iRow++) {
  print "$buckets[$iRow]" . $OFS;
  foreach $pkg (sort keys %column) {
    if (!defined($column{$pkg}[$iRow])) {
      $column{$pkg}[$iRow] = $total{$pkg};
    }
    $n = $column{$pkg}[$iRow];
    $d = $total{$pkg};
    if ($opt_p) {
      printf "%2.3f$OFS", pct2($n,$d);
    } else {
      print $n . $OFS;
    }
  }
  print "\n";
}
print "Total" . $OFS;
foreach $pkg (sort keys %column) {
  print "$total{$pkg}" . $OFS;
}
print "\n";


# pct2(x) returns a percentage (not a fraction) which corresponds to arg1/arg2.
sub pct2 ( $$ ) {
  my ($x,$w) = @_;
  if ($w <= 0) {
    if ($x > 0) {
      croak "pct2: Bad divisor: $x / $w";
      return 0;
    }
    $w = 1;
  }
  if ($x < 0 || $x > $w) {
    croak "pct2: Percentage out of range: $x / $w\n";
  }
  return (100*$x/$w);
}
