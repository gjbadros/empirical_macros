Understanding is the key difficulty;  once an accurate analysis of the
program exists, transforming specific parts to a new source-level
representation is fairly straightforward.  (It's knowing that it's safe
that is hard.)

CPP is lexical, so annotating characters is more natural than annotating
trees.  Emacs provides a good, fairly efficient, general way to annotate
text regions.

Think of emacs as a human; give it the information needed to make
appropriate conservative transformations, and let it apply heuristics to
perform the changes.

----
Approaches to name clash problem:

1) Use a second pass, and at expansion use sites that are going to be
replaced, check the symbol table for no clash
-> 2nd pass could be done by a separate run, w/ persistent variables
-> or 2nd pass could be control my backcalls to dump the cpp state
and/or tree and to start parsing a filename
**-> or two passes could be the norm, with a hook called to see if the
second pass is desired; short term easiest, though less flexible

2) On first pass, at each USE of a macro, track a uniquified list of
clashing identifiers, then don't allow substituting to a clashing
identifier.
-> This requires a means of getting a whole symbol table; probably way
too slow, since there are lots of uses.

3) Don't substitute; just use old macro name as the new identifier.

