//$Id$
// This file is automatically generated by make --- DO NOT EDIT!
char *hook_names[] = {
"STARTUP",
"///% {} Called immediately after the perl parser is initialized.",
"",
"STARTPARSE",
"///% {} Called just before the bison parser is started (i.e. before yyparse()).",
"",
"EXIT",
"///% {$return_exit_code} Called just before the system exit() call.",
"",
"HANDLE_DIRECTIVE",
"///% {$directive_name} Called exactly once for each directive.  $directive_name is",
"///% the directive as it appeared in the source code with the leading # removed.",
"",
"DO_DEFINE",
"///% {$s_start$s_end$name_args_body} Called exactly once for each #define. ",
"///% Arguments give the source code character offsets of the line and the ",
"///% unprocessed rest of the line including the name of the macro its arguments",
"///% and its definition.",
"",
"PRE_DO_UNDEF",
"///% {$s_start$s_end$mname} Called exactly once for each #undef.",
"///% Arguments give the source code character offsets of the line and the",
"///% name of the macro being undefined.  This hook is called just before",
"///% the macro is undefined so its definition still exists ",
"///% in the preprocessor's state.",
"",
"DO_UNDEF",
"///% {$s_start$s_end$mname} Called exactly once for each #undef.",
"///% Arguments give the source code character offsets of the line and the",
"///% name of the macro being undefined.  This hook is called immediately after",
"///% the macro is undefined.",
"",
"DO_INCLUDE",
"///% {$s_start$s_end$filename_given $filename_resolved $flags} ",
"///% Called exactly once for each #include",
"///% #include_next or #import directive.  Source coded character offsets of",
"///% the line are given. Also $filename_given is the name of the",
"///% file to be included as written in the source;  $filename_resolved is the",
"///% fully qualified path name of the file to be read; and  $flags is a bitmap",
"///% with three relevant masks:  $ANGLE_BRACKETS for whether the filename appeared",
"///% in angle brackets signifying a system include file; $SKIP_DIRS for whether this",
"///% is an #include_next directive; and $IMPORTING for whether this is an #import",
"///% directive.",
"",
"DO_IF",
"///% {$s_start$s_end $conditional $skipped $value} ",
"///% Called exactly once for each #if ",
"///% (not #ifdef or #ifndef) directive seen by the preprocessor. In particular",
"///% note that normally nested #ifXX-s that are ignored will not invoke this hook.",
"///% Arguments give the source code character",
"///% offsets of the directive; $conditional is the guard checked $skipped is",
"///% the literal text that is skipped (conditional was false if this is non-empty) and",
"///% $value is 1 iff the $conditional evaluated to true (defined) 0 otherwise.",
"",
"DO_XIFDEF",
"///% {}",
"",
"DO_IFDEF",
"///% {$s_start $s_end $conditional $trailer $skipped $value}",
"///% Called exactly once for each #ifdef",
"///% (not #if or #ifndef) directive seen by the preprocessor. In particular",
"///% note that normally nested #ifXX-s that are ignored will not invoke this hook.",
"///% Arguments give the source code character",
"///% offsets of the directive; $conditional is the name checked for defined-ness;",
"///% $trailer is whatever follows that name on the same line (usually empty); $skipped is",
"///% the literal text that is skipped (conditional was false if this is non-empty) and",
"///% $value is 1 iff the name from the $conditional was defined 0 otherwise.",
"",
"DO_IFNDEF",
"///% {$s_start $s_end $conditional $trailer $skipped $value}",
"///% Called exactly once for each #ifndef",
"///% (not #if or #ifdef) directive seen by the preprocessor. In particular",
"///% note that normally nested #ifXX-s that are ignored will not invoke this hook.",
"///% Arguments give the source code character",
"///% offsets of the directive; $conditional is the name checked for defined-ness;",
"///% $trailer is whatever follows that name on the same line (usually empty); $skipped is",
"///% the literal text that is skipped (conditional was false if this is non-empty) and",
"///% $value is 1 iff the name from the $conditional was not defined 0 otherwise.",
"",
"DO_ELSE",
"///% {$s_start $s_end $orig_conditional $trailer $skipped $fSkipping $s_start_branch}",
"///% Called exactly once for each #else directive seen by the preprocessor. In particular",
"///% note that if the directive is skipped due to another outer conditional this",
"///% hook does not get called.",
"///% Arguments give the source code character",
"///% offsets of the directive; $orig_conditional is the guard in the",
"///% matching #ifXX directive; ",
"///% $trailer is whatever follows #else on the same line (usually empty); $skipped is",
"///% the literal text that is skipped (if any); $fSkipping is 1 iff",
"///% this #else clause's guarded text got skipped; $s_start_branch is a souce code",
"///% character offset of where the branch begins if it's used or the character",
"///% following the skipped text if not.",
"",
"DO_ELIF",
"///% {$s_start $s_end $already_did_clause $conditional $skipped $value}",
"///% Called exactly once for each #elif directive seen by the preprocessor. In particular",
"///% note that if the directive is skipped due to another outer conditional this",
"///% hook does not get called.",
"///% Arguments give the source code character",
"///% offsets of the directive; $already_did_clause is 1 iff one of the",
"///% earlier #ifXX or #elif-s succeeded (thus implying the code guarded will be skipped);",
"///% $conditional is the conditional tested; $skipped is the skipped code (if any);",
"///% and $value is what $conditional evaluated to.  The code guarded is",
"///% included iff !$conditional and $value in which case $skipped will be empty.",
"",
"DO_ENDIF",
"///% {}",
"",
"CREATE_PREDEF",
"///% {}",
"",
"CREATE_DEF",
"///% {}",
"",
"DELETE_DEF",
"///% {}",
"",
"SPECIAL_SYMBOL",
"///% {}",
"",
"EXPAND_MACRO",
"///% {}",
"",
"MACARG_EXP",
"///% {}",
"",
"MACRO_CLEANUP",
"///% {}",
"",
"IFDEF_MACRO",
"///% {}",
"",
"COMMENT",
"///% {}",
"",
"STRING_CONSTANT",
"///% {}",
"",
"CPP_ERROR",
"///% {}",
"",
"CPP_WARN",
"///% {}",
"",
"CPP_PEDWARN",
"///% {}",
"",
"CPP_OUT",
"///% {}",
"",
"ADD_IMPORT",
"///% {}",
"",
"INCLUDE_FILE",
"///% {}",
"",
"DONE_INCLUDE_FILE",
"///% {}",
"",
"TOKEN",
"///% {}",
"",
"FUNCTION",
"///% {}",
"",
"FUNC_CALL",
"///% {}",
"",
"ANNOTATE",
"///% {}",
"",
"POP_BUFFER",
"///% {}",
"",
};

